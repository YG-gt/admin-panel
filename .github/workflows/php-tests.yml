name: 🔒 Paranoia Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: PHP ${{ matrix.php-version }} Tests
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        php-version: ['8.1', '8.2', '8.3']
        
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐘 Setup PHP ${{ matrix.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: curl, mbstring, session, dom, xml, tokenizer, ctype, json
          coverage: xdebug
          tools: composer:v2

      - name: 📋 Validate composer.json
        run: composer validate --strict

      - name: 📦 Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ~/.composer/cache
          key: php-${{ matrix.php-version }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: php-${{ matrix.php-version }}-composer-

      - name: 🔧 Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: 🧪 Run PHPUnit tests
        run: |
          # Check if vendor directory exists
          ls -la vendor/bin/
          # Run tests
          ./vendor/bin/phpunit --colors=always --testdox

      - name: 📊 Run tests with coverage
        if: matrix.php-version == '8.2'
        run: |
          composer test-coverage
          ls -la coverage/

      - name: 🛡️ Security tests only
        run: ./vendor/bin/phpunit --colors=always --testdox --group=security

      - name: 📝 Logging tests only  
        run: ./vendor/bin/phpunit --colors=always --testdox --group=logging

      - name: 🔍 Test specific groups
        run: |
          ./vendor/bin/phpunit --group=validation --testdox
          ./vendor/bin/phpunit --group=csrf --testdox
          ./vendor/bin/phpunit --group=rate-limiting --testdox
          ./vendor/bin/phpunit --group=authorization --testdox

  security-scan:
    name: 🛡️ Security Analysis
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🐘 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          
      - name: 🔍 Check for known vulnerabilities
        run: |
          echo "🔒 Paranoia Security Check"
          echo "Checking for common PHP security issues..."
          
          # Check for potential security issues in PHP files
          echo "Checking for eval() usage..."
          if grep -r "eval(" *.php; then
            echo "❌ Found eval() usage - potential security risk"
            exit 1
          else
            echo "✅ No eval() found"
          fi
          
          echo "Checking for shell_exec() usage..."
          if grep -r "shell_exec\|exec\|system\|passthru" *.php; then
            echo "⚠️ Found shell execution functions - review needed"
          else
            echo "✅ No dangerous shell functions found"
          fi
          
          echo "Checking for SQL injection risks..."
          if grep -r "mysql_query\|mysqli_query.*\$" *.php; then
            echo "⚠️ Found potential SQL injection risks"
          else
            echo "✅ No obvious SQL injection risks"
          fi
          
          echo "🎉 Security scan completed!"

  lint:
    name: 🧹 Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🐘 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          
      - name: 🔍 PHP Syntax Check
        run: |
          echo "🔍 Checking PHP syntax..."
          find . -name "*.php" -not -path "./vendor/*" -exec php -l {} \;
          echo "✅ PHP syntax check completed!"
          
      - name: 📏 Code Style Check
        run: |
          echo "📏 Basic code style checks..."
          
          # Check for mixed line endings
          if find . -name "*.php" -not -path "./vendor/*" -exec file {} \; | grep CRLF; then
            echo "⚠️ Found CRLF line endings - should use LF"
          else
            echo "✅ Line endings OK"
          fi
          
          # Check for trailing whitespace
          if find . -name "*.php" -not -path "./vendor/*" -exec grep -l " $" {} \;; then
            echo "⚠️ Found trailing whitespace"
          else
            echo "✅ No trailing whitespace"
          fi
          
          echo "✅ Code style check completed!" 